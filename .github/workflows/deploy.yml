name: 'Deploy'
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Environment name which is being deployed to'
      service-name:
        required: true
        type: string
        description: 'Name of the service, must match the GCloud Run instances name'
      gcloud-deploy-region:
        required: true
        type: string
        description: 'Region to deploy the GCloud Run instance to'
      gcloud-service-account:
        required: true
        type: string
        description: 'GCloud Service Account to authenticate as, e.g. github-actions@...'
      gcloud-workload-identity-provider:
        required: true
        type: string
        description: 'GCloud Identity Provider id to use for federated authentication'
      github-repository:
        required: true
        type: string
        description: 'Name of GitHub repository'
      tag:
        required: true
        type: string
        description: 'Docker image tag to deploy'
      terraform-file-path:
        required: true
        type: string
        description: 'Path to the terraform file managing the versions of the service'
    secrets:
      gcloud-deploy-project:
        required: true
        description: 'GCloud Project ID for the environment deployed to'
      gcloud-docker-image-url:
        required: true
        description: 'May contain secrets, therefore it is located under secrets'
      slack-webhook-url:
        required: true
      token:
        required: true

concurrency:
  group: deploy_${{ inputs.environment }}
  cancel-in-progress: true

jobs:
  docker-image-details:
    name: Get Docker Image Digest
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.get-docker-image-digest.DOCKER_IMAGE_DIGEST }}
      commit-sha: ${{ steps.get-commit-sha.COMMIT_SHA }}
    permissions:
      id-token: 'write'
    steps:
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: ${{ inputs.gcloud-workload-identity-provider }}
          service_account: ${{ inputs.gcloud-service-account }}
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: Get Docker Image Digest
        id: get-docker-image-digest
        run: |
          export DOCKER_IMAGE_DIGEST=$(gcloud artifacts docker images list ${{ secrets.gcloud-docker-image-url }} --format='value(version)' --include-tags --filter tags~${{ inputs.tag }})
          echo "::set-output name=DOCKER_IMAGE_DIGEST::$DOCKER_IMAGE_DIGEST"
        shell: bash
      - name: Configure Docker Login
        run: gcloud auth configure-docker -q
        shell: bash
      - name: Pull Docker Image@
        run: |
          echo "docker pull ${{ secrets.gcloud-docker-image-url }}:${{ inputs.tag }}" | base64
          docker pull ${{ secrets.gcloud-docker-image-url }}:${{ inputs.tag }}
        shell: bash
      - name: Get Commit SHA
        id: get-commit-sha
        shell: bash
        run: |
          export COMMIT_SHA=$(docker inspect --format '{{ index .Config.Labels "github_sha"}}' ${{ secrets.gcloud-docker-image-url }}:${{ inputs.tag }})
          echo $COMMIT_SHA
          echo "::set-output name=COMMIT_SHA::$COMMIT_SHA"
  deploy:
    needs: docker-image-details
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: 'write'
    steps:
      - name: 'Deploy'
        uses: 'google-github-actions/deploy-cloudrun@v0'
        with:
          service: ${{ inputs.service-name }}
          image: ${{ secrets.gcloud-docker-image-url }}@${{ needs.docker-image-details.outputs.digest }}
          region: ${{ inputs.gcloud-deploy-region }}
          project_id: ${{ secrets.gcloud-deploy-project }}
          flags: --project=${{ secrets.gcloud-deploy-project }}

  sync-version:
    needs:
      - deploy
      - docker-image-details
    name: Sync version to Terraform
    runs-on: ubuntu-latest
    permissions:
      id-token: 'write'
    steps:
      - uses: go-fjords/sync-terraform-version@v3
        name: Sync Version To Terraform
        with:
          token: ${{ secrets.private-repos-token }}
          file-path: ${{ inputs.terraform-file-path }}
          service-name: ${{ inputs.service-name }}
          environment: ${{ inputs.environment }}
          docker-image-digest: ${{ needs.docker-image-details.outputs.digest }}

  add-tag:
    needs: deploy
    name: Add Tag
    runs-on: ubuntu-latest
    permissions:
      id-token: 'write'
    steps:
      - uses: go-fjords/add-gcloud-artifact-docker-tag@v3
        with:
          gcloud-service-account: ${{ inputs.gcloud-service-account }}
          gcloud-workload-identity-provider: ${{ inputs.gcloud-workload-identity-provider }}
          gcloud-docker-image-url: ${{ secrets.gcloud-docker-image-url }}
          tag: ${{ inputs.tag }}
          new-tag: ${{ inputs.environment }}

  notify-slack-of-deploy:
    needs:
      - docker-image-details
      - deploy
    if: ${{ always() && !cancelled() }}
    name: Notify Slack of deploy status
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.slack-webhook-url }}
      SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      SLACK_CLOUD_RUN_URL: https://console.cloud.google.com/run/detail/${{ inputs.gcloud-deploy-region }}/${{ inputs.service-name }}/metrics?project=${{ secrets.gcloud-deploy-project }}
      SLACK_LOGS_URL: https://console.cloud.google.com/logs/viewer?advancedFilter=resource.type%20%3D%20%22cloud_run_revision%22%0Aresource.labels.service_name%20%3D%20%22${{ inputs.service-name }}%22%0Aresource.labels.location%20%3D%20%22${{ inputs.gcloud-deploy-region }}%22%0A%20severity%3E%3DDEFAULT&${{ secrets.gcloud-deploy-project }}
      SLACK_COMMIT_URL: https://github.com/go-fjords/${{ inputs.github-repository }}/commit/${{ needs.docker-image-details.outputs.commit-sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.docker-image-details.outputs.commit-sha }}
      - name: Generate commit message summary
        id: generate-commit-summary
        run: |
          commitSummary=$(git log -1 --pretty=%B | head -n 1)
          commitAuthor=$(git log -1 --pretty=%an)
          echo "::set-output name=commitSummary::$commitSummary"
          echo "::set-output name=commitAuthor::$commitAuthor"
      - name: Notify Slack regarding successfull deploy
        if: ${{ needs.deploy.result == 'success' }}
        uses: slackapi/slack-github-action@v1.16.0
        with:
          payload: "{\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\":rocket: Deployed *${{ inputs.service-name }}* to *${{ inputs.environment }}* by *${{ github.actor }}*\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ env.SLACK_CLOUD_RUN_URL }}|cloud run> - <${{ env.SLACK_LOGS_URL }}|logs> - <${{ env.SLACK_COMMIT_URL }}|commit>\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"${{ steps.generate-commit-summary.outputs.commitSummary }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Authored by: ${{ steps.generate-commit-summary.outputs.commitAuthor }}\"}}]}"
      - name: Notify Slack regarding failed deploy
        if: ${{ always() && needs.deploy.result == 'failure' }}
        uses: slackapi/slack-github-action@v1.16.0
        with:
          payload: "{\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\":boom: Failed to deploy *${{ inputs.service-name }}* to *${{ inputs.environment }}* by *${{ github.actor }}*\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ env.SLACK_CLOUD_RUN_URL }}|cloud run> - <${{ env.SLACK_LOGS_URL }}|logs> - <${{ env.SLACK_COMMIT_URL }}|commit>\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"${{ steps.generate-commit-summary.outputs.commitSummary }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Authored by: ${{ steps.generate-commit-summary.outputs.commitAuthor }}\"}}]}"

