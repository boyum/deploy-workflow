name: 'Deploy'
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Environment name which is being deployed to'
      service-name:
        required: true
        type: string
        description: 'Name of the service, must match the GCloud Run instances name'
      gcloud-deploy-region:
        required: true
        type: string
        description: 'Region to deploy the GCloud Run instance to'
      gcloud-artifact-region:
        required: true
        type: string
        description: 'Region of the GCloud Artifact'
      gcloud-artifact-repository:
        required: true
        type: string
        description: 'Repository containing the GCloud Artifact'
      gcloud-artifact-image:
        required: true
        type: string
        description: 'Docker Image name, do not include the tag.'
      terraform-file-path:
        required: true
        type: string
        description: 'Path to the terraform file managing the versions of the service'
      github-repository:
        required: true
        type:  string
        description: 'Name of GitHub repository'
    secrets:
      gcloud-deploy-project:
        required: true
        description: 'GCloud Project ID for the environment deployed to'
      gcloud-service-account-key:
        required: true
      gcloud-artifact-project:
        required: true
      private-repos-token:
        required: true
      slack-webhook-url:
        required: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Set Tag
        id: set-tag
        run: |
          export TAG=$(if [ -z "${{ github.event.inputs.tag }}" ]; then echo "${{ github.sha }}"; else echo "${{ github.event.inputs.tag }}"; fi)
          echo "::set-output name=TAG::$TAG"
      - uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.gcloud-service-account-key }}
          project_id: ${{ secrets.gcloud-deploy-project }}
          export_default_credentials: true
      - name: Get Docker Image Digest
        id: get-docker-image-digest
        run: |
          export DOCKER_IMAGE_DIGEST=$(gcloud artifacts docker images list ${{ inputs.gcloud-artifact-region }}-docker.pkg.dev/${{ secrets.gcloud-artifact-project }}/${{ inputs.gcloud-artifact-repository }}/${{ inputs.gcloud-artifact-image }} --format='value(version)' --include-tags --filter tags~${{ steps.set-tag.outputs.TAG }})
          echo "::set-output name=DOCKER_IMAGE_DIGEST::$DOCKER_IMAGE_DIGEST"
        shell: bash
      - name: Deploy
        run: |-
          gcloud run deploy ${{ inputs.service-name }} \
          --image ${{ inputs.gcloud-artifact-region }}-docker.pkg.dev/${{ secrets.gcloud-artifact-project }}/${{ inputs.gcloud-artifact-repository }}/${{ inputs.gcloud-artifact-image }}@${{ steps.get-docker-image-digest.outputs.DOCKER_IMAGE_DIGEST }} \
          --region ${{ inputs.gcloud-deploy-region }} \
          --project ${{ secrets.gcloud-deploy-project }}
        shell: bash

  sync-version:
    needs: deploy
    name: Sync version to Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Set Tag
        id: set-tag
        run: |
          export TAG=$(if [ -z "${{ github.event.inputs.tag }}" ]; then echo "${{ github.sha }}"; else echo "${{ github.event.inputs.tag }}"; fi)
          echo "::set-output name=TAG::$TAG"
      - uses: actions/checkout@v2
        with:
          repository: 'go-fjords/operation'
          ref: 'main'
          token: ${{ secrets.private-repos-token }}
      - uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.gcloud-service-account-key }}
          project_id: ${{ secrets.gcloud-deploy-project }}
          export_default_credentials: true
      - name: Get Docker Image Digest
        id: get-docker-image-digest
        run: |
          export DOCKER_IMAGE_DIGEST=$(gcloud artifacts docker images list ${{ inputs.gcloud-artifact-region }}-docker.pkg.dev/${{ inputs.gcloud-artifact-project }}/${{ inputs.gcloud-artifact-repository }}/${{ inputs.gcloud-artifact-image }} --format='value(version)' --include-tags --filter tags~${{ steps.set-tag.outputs.TAG }})
          echo "::set-output name=DOCKER_IMAGE_DIGEST::$DOCKER_IMAGE_DIGEST"
        shell: bash
      - run: |
          echo "Update '${{ inputs.environment }}' in '${{ inputs.terraform-file-path }}' with digest '$DOCKER_IMAGE_DIGEST'"
          sed -ie "s/${{ inputs.environment }}\(\s*\)= \"sha256:[a-z0-9]*\"/${{ inputs.environment }}\1= \"$DOCKER_IMAGE_DIGEST\"/" ${{ inputs.terraform-file-path }}
        shell: bash
        env:
          DOCKER_IMAGE_DIGEST: ${{ steps.get-docker-image-digest.outputs.DOCKER_IMAGE_DIGEST}}
      - uses: EndBug/add-and-commit@v7
        id: commit-version-change
        with:
          add: ${{ inputs.terraform-file-path }}
          author_name: Tech@GoFjords
          author_email: tech@gofjords.com
          default_author: github_actions
          message: Updated ${{ inputs.environment }} version for ${{ inputs.service-name }} [skip actions]
          push: true

  notify-slack-of-deploy:
    needs:
      - deploy
    if: ${{ always() }}
    name: Notify Slack of deploy status
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.slack-webhook-url }}
      SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      SLACK_CLOUD_RUN_URL: https://console.cloud.google.com/run/detail/${{ inputs.gcloud-deploy-region }}/${{ inputs.service-name }}/metrics?project=${{ secrets.gcloud-deploy-project }}
      SLACK_LOGS_URL: https://console.cloud.google.com/logs/viewer?advancedFilter=resource.type%20%3D%20%22cloud_run_revision%22%0Aresource.labels.service_name%20%3D%20%22${{ inputs.service-name }}%22%0Aresource.labels.location%20%3D%20%22${{ inputs.gcloud-deploy-region }}%22%0A%20severity%3E%3DDEFAULT&${{ secrets.gcloud-deploy-project }}
      SLACK_COMMIT_URL: https://github.com/go-fjords/${{ inputs.github-repository }}/commit/${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.sha }}
      - name: Generate commit message summary
        id: generate-commit-summary
        run: |
          commitSummary=$(git log -1 --pretty=%B | head -n 1)
          echo "::set-output name=commitSummary::$commitSummary"
      - name: Notify Slack regarding successfull deploy
        if: ${{ needs.deploy.result == 'success' }}
        uses: slackapi/slack-github-action@v1.16.0
        with:
          payload: "{\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\":rocket: Deployed **${{ inputs.service-name }}** to ${{ inputs.environment }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ env.SLACK_CLOUD_RUN_URL }}|cloud run> - <${{ env.SLACK_LOGS_URL }}|logs> - <${{ env.SLACK_COMMIT_URL }}|commit>\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"${{ steps.generate-commit-summary.outputs.commitSummary }}\"}}]}"
      - name: Notify Slack regarding failed deploy
        if: ${{ always() && needs.deploy.result == 'failure' }}
        uses: slackapi/slack-github-action@v1.16.0
        with:
          payload: "{\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\":boom: Failed to deploy **${{ inputs.service-name }}** to ${{ inputs.environment }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ env.SLACK_CLOUD_RUN_URL }}|cloud run> - <${{ env.SLACK_LOGS_URL }}|logs> - <${{ env.SLACK_COMMIT_URL }}|commit>\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"${{ steps.generate-commit-summary.outputs.commitSummary }}\"}}]}"
